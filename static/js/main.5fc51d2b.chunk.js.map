{"version":3,"sources":["components/Header.js","components/ServiceCard.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","state","isOpen","collapsed","toggleCollapse","_this","setState","react_default","a","createElement","mdbreact_esm","color","dark","expand","className","onClick","this","id","navbar","left","active","to","nav","caret","right","href","icon","Component","BANNER","ServiceCard","react","Card","CardImg","top","width","src","alt","CardBody","CardTitle","Button","size","SearchPage","md","type","placeholder","aria-label","gradient","rounded","App","Header","SearchBar","components_ServiceCard","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5fc51d2b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBDropdown,\r\n    MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBIcon } from \"mdbreact\";\r\n\r\nclass NavbarPage extends Component {\r\n    state = {\r\n        isOpen: false,\r\n        collapsed: false\r\n    };\r\n\r\n    toggleCollapse = () => {\r\n        this.setState({ isOpen: !this.state.isOpen });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <MDBNavbar color=\"default-color\" dark expand=\"md\">\r\n                <MDBNavbarBrand>\r\n                    <strong className=\"white-text\">LSH</strong>\r\n                </MDBNavbarBrand>\r\n                <MDBNavbarToggler onClick={this.toggleCollapse} />\r\n                <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n                    <MDBNavbarNav left>\r\n                        <MDBNavItem active>\r\n                            <MDBNavLink to=\"#!\">Home</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"#!\">Place your services</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBDropdown>\r\n                                <MDBDropdownToggle nav caret>\r\n                                    <div className=\"d-none d-md-inline\">Services</div>\r\n                                </MDBDropdownToggle>\r\n                                <MDBDropdownMenu className=\"dropdown-default\" right>\r\n                                    <MDBDropdownItem href=\"#!\">Courses</MDBDropdownItem>\r\n                                    <MDBDropdownItem href=\"#!\">Tutors</MDBDropdownItem>\r\n                                    <MDBDropdownItem href=\"#!\">Repairs</MDBDropdownItem>\r\n                                    <MDBDropdownItem href=\"#!\">Electrician</MDBDropdownItem>\r\n                                </MDBDropdownMenu>\r\n                            </MDBDropdown>\r\n                        </MDBNavItem>\r\n                    </MDBNavbarNav>\r\n                    <MDBNavbarNav right>\r\n                        <MDBNavItem>\r\n                            <MDBNavLink to=\"#!\">Download App</MDBNavLink>\r\n                        </MDBNavItem>\r\n                        <MDBNavItem>\r\n                            <MDBDropdown>\r\n                                <MDBDropdownToggle nav caret>\r\n                                    <MDBIcon icon=\"user\" />\r\n                                </MDBDropdownToggle>\r\n                                <MDBDropdownMenu className=\"dropdown-default\" right>\r\n                                    <MDBDropdownItem href=\"#!\">Login</MDBDropdownItem>\r\n                                    <MDBDropdownItem href=\"#!\">Sign up</MDBDropdownItem>\r\n                                </MDBDropdownMenu>\r\n                            </MDBDropdown>\r\n                        </MDBNavItem>\r\n                    </MDBNavbarNav>\r\n                </MDBCollapse>\r\n            </MDBNavbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavbarPage;","import React, { Fragment } from 'react';\r\n\r\nimport {\r\n    Button, UncontrolledAlert, Card, CardImg, CardBody,\r\n    CardTitle, CardSubtitle, CardText\r\n} from 'reactstrap';\r\n\r\nconst BANNER = 'https://i.imgur.com/CaKdFMq.jpg';\r\n/*error message handly in future/*<UncontrolledAlert color=\"danger\" className=\"d-none d-lg-block\">\r\n            <strong>Account not activated.</strong>\r\n        </UncontrolledAlert>*/\r\nconst services = () => {\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card>\r\n                <CardImg top width=\"100%\" src={BANNER} alt=\"banner\"/>\r\n                <CardBody>\r\n                    <CardTitle className=\"h6 mb-2s text-secondary\">Course</CardTitle>\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <Button color=\"success\" size=\"sm\" className=\"font-weight-light\">View Service</Button>\r\n                    </div>\r\n                </CardBody>\r\n            </Card>\r\n        </Fragment>);\r\n};\r\n\r\nconst ServiceCard = () => (\r\n    <div className=\"row\">\r\n        <div className=\"col-sm\">\r\n            <Fragment>\r\n                <Card>\r\n                    <CardImg top width=\"100%\" src={BANNER} alt=\"banner\" />\r\n                    <CardBody>\r\n                        <CardTitle className=\"h6 mb-2s text-secondary\">Course</CardTitle>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button color=\"success\" size=\"sm\" className=\"font-weight-light\">View Service</Button>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </Fragment>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n            <Fragment>\r\n                <Card>\r\n                    <CardImg top width=\"100%\" src={BANNER} alt=\"banner\" />\r\n                    <CardBody>\r\n                        <CardTitle className=\"h6 mb-2s text-secondary\">Course</CardTitle>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button color=\"success\" size=\"sm\" className=\"font-weight-light\">View Service</Button>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </Fragment>\r\n        </div>\r\n        <div className=\"col-sm\">\r\n            <Fragment>\r\n                <Card>\r\n                    <CardImg top width=\"100%\" src={BANNER} alt=\"banner\" />\r\n                    <CardBody>\r\n                        <CardTitle className=\"h6 mb-2s text-secondary\">Course</CardTitle>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button color=\"success\" size=\"sm\" className=\"font-weight-light\">View Service</Button>\r\n                        </div>\r\n                    </CardBody>\r\n                </Card>\r\n            </Fragment>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default ServiceCard;","import React from \"react\";\r\nimport { MDBCol, MDBFormInline, MDBBtn } from \"mdbreact\";\r\n\r\nconst SearchPage = () => {\r\n    return (\r\n        <div className=\"d-flex justify-content-center\">\r\n        <MDBCol md=\"5\">\r\n            <MDBFormInline className=\"md-form\">\r\n                <input className=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                <MDBBtn gradient=\"aqua\" rounded size=\"sm\" type=\"submit\" className=\"mr-auto\">\r\n                    Search\r\n                </MDBBtn>\r\n            </MDBFormInline>\r\n        </MDBCol>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchPage;","import React, { Fragment } from 'react';\r\n\r\nimport NavbarPage from './components/Header';\r\nimport ServiceCard from './components/ServiceCard';\r\n//import Post from './components/Post';\r\nimport SearchPage from './components/SearchBar';\r\nconst App = () => (\r\n    <Fragment>\r\n\r\n        <NavbarPage />\r\n        <SearchPage />\r\n        <div className=\"container\">\r\n            <ServiceCard/>\r\n        </div>\r\n\r\n\r\n    </Fragment>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}